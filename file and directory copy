package com.jp.bz;

import java.io.*;

public class FileCopy {
	FileInputStream FIS;
	FileOutputStream FOS;

	public boolean copyFile(String src, String des) {
		try {
			FIS = new FileInputStream(src);
			FOS = new FileOutputStream(des);
			byte[] bt = new byte[1024];
			int readNum = 0;
			while ((readNum = FIS.read(bt)) != -1) {
				FOS.write(bt, 0, bt.length);
			}
			FIS.close();
			FOS.close();
			return true;
		} catch (Exception e) {
			try {
				FIS.close();
				FOS.close();
			} catch (IOException f) {
				// TODO
			}
			return false;
		} finally {
		}
	}

	/**
	 * 获取文件后缀 如：.java .jsp
	 * 
	 * @param filename
	 * @return
	 */
	public String getSuffix(String filename) {
		if (filename != null) {
			int index = filename.lastIndexOf(".");
			if (index >= 0) {
				return filename.substring(filename.lastIndexOf("."));
			}
		}
		return null;
	}

	/**
	 * 获取文件名，不包括后缀 test
	 * 
	 * @param filename
	 * @return
	 */
	public String getFilename(String filename) {
		if (filename != null) {
			int lastPointIndex = filename.lastIndexOf(".");
			int lastSeparatorIndex = filename.lastIndexOf(File.separator);
			if (lastPointIndex >= 0) {
				return filename.substring(lastSeparatorIndex + 1,
						lastPointIndex);
			}else{
				return filename.substring(lastSeparatorIndex + 1);
			}

		}
		return null;
	}

	/**
	 * 获取文件名，包括后缀 test.java
	 * 
	 * @param filename
	 * @return
	 */
	public String getFilenameIncludeSuffix(String filename) {
		if (filename != null) {
			return filename.substring(filename.lastIndexOf(File.separator) + 1);
		}
		return null;
	}
}



package com.jp.bz;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;

public class DirectoryCopy {
	FileInputStream FIS;
	FileOutputStream FOS;
	String beforeSuffix = ".java";
	String afterSuffix = ".j";

	public DirectoryCopy() {
	}

	// 文件夾拷貝核心函數

	public boolean copyDirectory(String SrcDirectoryPath,
			String DesDirectoryPath) {
		return copyDirectory(SrcDirectoryPath, DesDirectoryPath, beforeSuffix, afterSuffix);
	}

	// 文件夾拷貝核心函數

	public boolean copyDirectory(String SrcDirectoryPath,
			String DesDirectoryPath, String beforeSuffix, String afterSuffix) {

		try {
			// 創建不存在的目錄
			File F0 = new File(DesDirectoryPath);
			if (!F0.exists()) {
				if (!F0.mkdir()) {
					System.out.println("目標文件夾不存，創建失敗!");
				}
			}
			File F = new File(SrcDirectoryPath);
			File[] allFile = F.listFiles(); // 取得當前目錄下面的所有文件，將其放在文件數組中
			int totalNum = allFile.length; // 取得當前文件夾中有多少文件（包括文件夾）
			String srcName = "";
			String desName = "";
			int currentFile = 0;
			// 一個一個的拷貝文件
			for (currentFile = 0; currentFile < totalNum; currentFile++) {
				if (!allFile[currentFile].isDirectory()) {
					// 如果是文件是采用處理文件的方式
					FileCopy FC = new FileCopy();
					String filename = allFile[currentFile].toString();
					String suffix = FC.getSuffix(filename);
					if (suffix != null && beforeSuffix.equals(suffix)) {
						desName = DesDirectoryPath + "\\"
								+ FC.getFilename(filename) + afterSuffix;
					} else {
						desName = DesDirectoryPath + "\\"
								+ FC.getFilenameIncludeSuffix(filename);
					}
					srcName = filename;
					FC.copyFile(srcName, desName);
				}
				// 如果是文件夾就采用遞歸處理
				else {
					// 利用遞歸讀取文件夾中的子文件下的內容，再讀子文件夾下面的子文件夾下面的內容...
					if (copyDirectory(
							allFile[currentFile].getPath().toString(),
							DesDirectoryPath + "\\"
									+ allFile[currentFile].getName().toString(), beforeSuffix, afterSuffix)) {
					} else {
						System.out.println("SubDirectory Copy Error!");
					}
				}
			}
			return true;
		} catch (Exception e) {
			e.printStackTrace();
			return false;
		}
	}

	public static void main(String[] args) {
		DirectoryCopy directoryCopy = new DirectoryCopy();
		String src = "D:\\test\\BD";
		String dest = "D:\\test\\xjc";
		String beforeSuffix = ".java";
		String afterSuffix = ".j";

		File F = new File(src);
		if (F.exists()) {
			if (!F.isDirectory()) {
				System.out.println("請輸入一個目錄的全路徑!");
				System.exit(0);
			}
		} else {
		}
		if (directoryCopy.copyDirectory(src, dest, beforeSuffix, afterSuffix)) {
			System.out.println("Directory Copy Successfully!");
		} else {
			System.out.println("Directory Copy error!");
		}
	}
}

